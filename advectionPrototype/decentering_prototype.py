import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
#from scipy.sparse import dia_matrix, block_diag
import scipy.sparse as sp

Uc = np.array(
[[2851.199984550476, 2851.199984550476, 3024.0000128746033,
  3283.200216293335, 2678.4001171588898, 1209.6000373363495,
  432.00003057718277, 432.00003057718277, 172.80000820755959],
 [1900.8001506328583, 1641.6001081466675, 1987.2001647949219,
  2764.8001313209534, 2592.000102996826, 1555.2000939846039,
  1296.000051498413, 1900.8001506328583, 1900.8001506328583],
 [777.6000469923019, 0.0, 172.80000820755959, 1123.200023174286,
  1468.8000798225403, 1123.200023174286, 1641.6001081466675,
  3024.0000128746033, 3542.400097846985],
 [-432.00003057718277, -1382.4000656604767, -1468.8000798225403,
  -691.2000328302383, -86.40000410377979, 259.2000022530556,
  1555.2000939846039, 3456.000244617462, 4492.800092697144],
 [-1814.4001364707947, -2332.8000605106354, -2419.200074672699,
  -1814.4001364707947, -1123.200023174286, -172.80000820755959,
  1555.2000939846039, 3715.200126171112, 4924.800324440002],
 [-2160.000032186508, -2246.400046348572, -2246.400046348572,
  -1900.8001506328583, -1209.6000373363495, -86.40000410377979,
  1900.8001506328583, 3974.4003295898438, 4924.800324440002],
 [-1641.6001081466675, -1382.4000656604767, -1382.4000656604767,
  -1123.200023174286, -432.00003057718277, 691.2000328302383,
  2246.400046348572, 3628.8002729415894, 4147.200036048889],
 [-1555.2000939846039, -1036.8000090122223, -864.0000611543655,
  -604.8000186681747, -86.40000410377979, 864.0000611543655,
  1900.8001506328583, 2937.6001596450806, 3283.200216293335],
 [-1296.000051498413, -432.00003057718277, -432.00003057718277,
  -604.8000186681747, -604.8000186681747, -86.40000410377979,
  691.2000328302383, 1641.6001081466675, 2246.400046348572],
 [-1900.8001506328583, -691.2000328302383, -345.60001641511917,
  -691.2000328302383, -1209.6000373363495, -1123.200023174286,
  -259.2000022530556, 950.4000753164291, 1987.2001647949219],
 [-2678.4001171588898, -1296.000051498413, -691.2000328302383,
  -1036.8000090122223, -1641.6001081466675, -1468.8000798225403,
  -345.60001641511917, 1382.4000656604767, 2937.6001596450806],
 [-2764.8001313209534, -1555.2000939846039, -1036.8000090122223,
  -1382.4000656604767, -1814.4001364707947, -1382.4000656604767,
  -86.40000410377979, 1900.8001506328583, 3888.0001544952393],
 [-2678.4001171588898, -1641.6001081466675, -1555.2000939846039,
  -1987.2001647949219, -2160.000032186508, -1382.4000656604767,
  -172.80000820755959, 1468.8000798225403, 3024.0000128746033],
 [-2419.200074672699, -1900.8001506328583, -2246.400046348572,
  -2851.199984550476, -2851.199984550476, -1987.2001647949219,
  -950.4000753164291, -259.2000022530556, -259.2000022530556],
 [-2073.6000180244446, -2160.000032186508, -3024.0000128746033,
  -4060.8001828193665, -4147.200036048889, -3542.400097846985,
  -3801.6003012657166, -5011.200177669525, -5702.399969100952],
 [-1987.2001647949219, -2505.6000888347626, -3888.0001544952393,
  -5443.200087547302, -5961.600494384766, -6566.40043258667,
  -8294.400072097778, -9849.600648880005, -9849.600648880005],
 [-2678.4001171588898, -3456.000244617462, -5184.000205993652,
  -7257.600545883179, -8640.000128746033, -10540.800762176514,
  -12873.600339889526, -13219.201040267944, -11923.200988769531],
 [-4492.800092697144, -5702.399969100952, -7603.200602531433,
  -9849.600648880005, -11577.600288391113, -13564.800453186035,
  -14947.200679779053, -13651.20062828064, -11923.200988769531],
 [-7603.200602531433, -9158.400535583496, -10972.800350189209,
  -12614.40110206604, -13824.000978469849, -14774.400329589844,
  -14601.601266860962, -12355.200576782227, -11491.200113296509],
 [-11664.000463485718, -13564.800453186035, -14860.800504684448,
  -15379.200267791748, -15120.001029968262, -14515.201091766357,
  -12960.00051498413, -11145.600700378418, -11145.600700378418],
 [-14774.400329589844, -16588.800144195557, -17020.80101966858,
  -16243.200731277466, -14774.400329589844, -13305.601215362549,
  -11577.600288391113, -10368.000411987305, -10540.800762176514],
 [-15897.601318359375, -17193.601369857788, -16761.600494384766,
  -15120.001029968262, -12960.00051498413, -11059.200525283813,
  -9936.000180244446, -9676.800298690796, -9763.2004737854],
 [-14947.200679779053, -15811.20114326477, -15033.600854873657,
  -12960.00051498413, -10281.6002368927, -8467.200422286987,
  -8294.400072097778, -8812.800478935242, -8640.000128746033],
 [-12182.400226593018, -12873.600339889526, -12268.800401687622,
  -10108.800530433655, -7948.8006591796875, -6998.400020599365,
  -6912.000489234924, -6998.400020599365, -6652.800607681274],
 [-7948.8006591796875, -8640.000128746033, -8380.800247192383,
  -6998.400020599365, -6134.400200843811, -5788.800144195557,
  -4924.800324440002, -4233.600211143494, -3801.6003012657166],
 [-2851.199984550476, -3715.200126171112, -3801.6003012657166,
  -3456.000244617462, -3542.400097846985, -3196.8000411987305,
  -1641.6001081466675, -259.2000022530556, 432.00003057718277],
 [2592.000102996826, 1900.8001506328583, 1728.000122308731,
  1296.000051498413, 518.4000045061111, 1036.8000090122223,
  2937.6001596450806, 4579.200267791748, 5184.000205993652],
 [7776.0003089904785, 7344.00007724762, 7084.80019569397, 6393.600082397461,
  5702.399969100952, 6134.400200843811, 7430.400252342224, 8467.200422286987,
  8640.000128746033],
 [12700.799989700317, 12355.200576782227, 12096.000051498413,
  11491.200113296509, 10800.0, 10713.600468635559, 11059.200525283813,
  11404.799938201904, 11318.401050567627],
 [16675.20031929016, 16502.40125656128, 16502.40125656128,
  16243.200731277466, 15552.000617980957, 14774.400329589844,
  14342.400741577148, 14169.60039138794, 13910.401153564453]]
)

Vc = np.array(
[[-2505.6000888347626, -1468.8000798225403, -345.60001641511917,
  -691.2000328302383, -1641.6001081466675, -1641.6001081466675,
  -1641.6001081466675, -4060.8001828193665, -7084.80019569397],
 [-1728.000122308731, -432.00003057718277, 1036.8000090122223,
  950.4000753164291, -86.40000410377979, 0.0, 345.60001641511917,
  -2505.6000888347626, -6307.20055103302],
 [-777.6000469923019, 432.00003057718277, 1641.6001081466675,
  1900.8001506328583, 950.4000753164291, 1209.6000373363495,
  1468.8000798225403, -1468.8000798225403, -5443.200087547302],
 [259.2000022530556, 1036.8000090122223, 1814.4001364707947,
  2246.400046348572, 1555.2000939846039, 1641.6001081466675,
  1555.2000939846039, -1382.4000656604767, -4838.400149345398],
 [864.0000611543655, 1382.4000656604767, 1987.2001647949219,
  2332.8000605106354, 1728.000122308731, 1555.2000939846039,
  777.6000469923019, -1900.8001506328583, -4406.400239467621],
 [950.4000753164291, 1728.000122308731, 2332.8000605106354,
  2419.200074672699, 1814.4001364707947, 1036.8000090122223,
  -259.2000022530556, -2592.000102996826, -3801.6003012657166],
 [518.4000045061111, 1900.8001506328583, 2851.199984550476,
  2851.199984550476, 1987.2001647949219, 691.2000328302383,
  -950.4000753164291, -2937.6001596450806, -3024.0000128746033],
 [-604.8000186681747, 1468.8000798225403, 2851.199984550476,
  3110.4001879692078, 2246.400046348572, 691.2000328302383,
  -1209.6000373363495, -3024.0000128746033, -2592.000102996826],
 [-2246.400046348572, 604.8000186681747, 2505.6000888347626,
  2937.6001596450806, 2246.400046348572, 777.6000469923019,
  -1036.8000090122223, -2678.4001171588898, -2678.4001171588898],
 [-4233.600211143494, -345.60001641511917, 2160.000032186508,
  2851.199984550476, 2332.8000605106354, 864.0000611543655,
  -864.0000611543655, -2332.8000605106354, -2764.8001313209534],
 [-6307.20055103302, -1209.6000373363495, 1987.2001647949219,
  3196.8000411987305, 2764.8001313209534, 1036.8000090122223,
  -864.0000611543655, -2332.8000605106354, -2937.6001596450806],
 [-8294.400072097778, -1987.2001647949219, 2073.6000180244446,
  3715.200126171112, 3283.200216293335, 1209.6000373363495,
  -1123.200023174286, -2937.6001596450806, -3369.6000695228577],
 [-10195.20070552826, -2937.6001596450806, 2160.000032186508,
  4147.200036048889, 3542.400097846985, 1036.8000090122223,
  -1987.2001647949219, -3715.200126171112, -3715.200126171112],
 [-11664.000463485718, -4060.8001828193665, 1987.2001647949219,
  4406.400239467621, 3456.000244617462, 259.2000022530556,
  -2851.199984550476, -4320.000064373016, -4320.000064373016],
 [-12528.000926971436, -4924.800324440002, 1641.6001081466675,
  4406.400239467621, 3024.0000128746033, -345.60001641511917,
  -3024.0000128746033, -4579.200267791748, -5097.60035276413],
 [-12614.40110206604, -5097.60035276413, 1814.4001364707947,
  4752.000296115875, 3024.0000128746033, -172.80000820755959,
  -2678.4001171588898, -4924.800324440002, -5961.600494384766],
 [-12009.601163864136, -4579.200267791748, 2678.4001171588898,
  5961.600494384766, 4147.200036048889, 777.6000469923019,
  -2419.200074672699, -5961.600494384766, -7344.00007724762],
 [-11059.200525283813, -3801.6003012657166, 3715.200126171112,
  7430.400252342224, 5529.600262641907, 1728.000122308731,
  -2419.200074672699, -6739.200139045715, -9158.400535583496],
 [-9763.2004737854, -2937.6001596450806, 4320.000064373016,
  7948.8006591796875, 5788.800144195557, 1555.2000939846039,
  -3456.000244617462, -7084.80019569397, -9849.600648880005],
 [-8208.000540733337, -2073.6000180244446, 4147.200036048889,
  6825.60031414032, 4406.400239467621, 0.0, -5356.8002343177795,
  -8208.000540733337, -9504.00059223175],
 [-6220.8003759384155, -1555.2000939846039, 3024.0000128746033,
  4320.000064373016, 1814.4001364707947, -2592.000102996826,
  -7516.800427436829, -9849.600648880005, -9504.00059223175],
 [-4233.600211143494, -1468.8000798225403, 1036.8000090122223,
  1123.200023174286, -1641.6001081466675, -5788.800144195557,
  -9590.400767326355, -10540.800762176514, -9849.600648880005],
 [-2332.8000605106354, -1641.6001081466675, -1123.200023174286,
  -2592.000102996826, -5529.600262641907, -8467.200422286987,
  -10454.40058708191, -10108.800530433655, -9590.400767326355],
 [-432.00003057718277, -1468.8000798225403, -2764.8001313209534,
  -5875.200319290161, -8640.000128746033, -9590.400767326355,
  -9849.600648880005, -9331.200242042542, -9072.000360488892],
 [1641.6001081466675, -777.6000469923019, -3542.400097846985,
  -7689.600133895874, -9676.800298690796, -9504.00059223175,
  -9417.600417137146, -9331.200242042542, -9244.8007106781],
 [3974.4003295898438, 691.2000328302383, -3283.200216293335,
  -7603.200602531433, -9072.000360488892, -9244.8007106781,
  -9676.800298690796, -9936.000180244446, -9676.800298690796],
 [6048.0000257492065, 2678.4001171588898, -1814.4001364707947,
  -6134.400200843811, -8035.200190544128, -8899.200654029846,
  -9676.800298690796, -9936.000180244446, -9331.200242042542],
 [7776.0003089904785, 4406.400239467621, 86.40000410377979,
  -4147.200036048889, -6480.000257492065, -7776.0003089904785,
  -8812.800478935242, -8899.200654029846, -8294.400072097778],
 [9244.8007106781, 5788.800144195557, 1987.2001647949219,
  -1900.8001506328583, -4492.800092697144, -6048.0000257492065,
  -7257.600545883179, -7257.600545883179, -6739.200139045715],
 [10454.40058708191, 7084.80019569397, 3542.400097846985, 0.0,
  -2592.000102996826, -4233.600211143494, -5356.8002343177795,
  -5616.000437736511, -5356.8002343177795]]
)

class Decenterer:

    def __init__(self, mask):

        self._mask = mask

        m, n = self._mask.shape

        # gradl(L(U, V, l)) = A * X + B

        # Blocks of A
        A_uu = sp.eye(m*(n-1)) * 2
        A_vv = sp.eye((m-1)*n) * 2
        A_uv = None
        A_vu = None

        diags_uvl = np.ones((2, m*n))
        diags_uvl[0, :] = -1
        uvl_block = sp.dia_matrix((diags_uvl, [0, 1]), shape=(n-1, n))
        A_ul = sp.block_diag([uvl_block]*m)

        A_vl = sp.lil_matrix(((m-1)*n, m*n))
        for k in range((m-1)*n):
            A_vl[k, k] = - 1
            A_vl[k, k + n] = 1

        A_lu = A_ul.T
        A_lv = A_vl.T
        A_ll = None

        #print(A_vl.todense())

        A = sp.bmat([[A_uu, A_uv, A_ul],
                    [A_vu, A_vv, A_vl],
                    [A_lu, A_lv, A_ll]])

        A = sp.lil_matrix(A) # for direct access to rows/cols

        # masks for where currents should be 0, obtained from diff.
        fake_UVc = np.ma.masked_array(np.zeros((m,n)), mask)
        Uc_mask = np.diff(fake_UVc, axis=1).flatten().mask
        Vc_mask = np.diff(fake_UVc, axis=0).flatten().mask
        l_mask = fake_UVc.flatten().mask

        self._where_not_zero = np.where(np.logical_not(np.concatenate((Uc_mask, Vc_mask, l_mask))))[0]

        # Remove one of the constraints that is redundant with all others.
        self._where_not_zero = self._where_not_zero[:-1]

        # Remove rows and columns where the values are set to 0
        A = A[:, self._where_not_zero]
        A = A[self._where_not_zero, :]

        # sp.linalg() unavailable in my version
        self._Ainv = np.linalg.inv(A.todense())


    def apply(self, Uc, Vc):

        m, n = self._mask.shape

        # definition of B
        B_u = - np.diff(Uc, axis=1).flatten()
        B_v = -  np.diff(Vc, axis=0).flatten()
        B_l = np.zeros((m, n)).flatten()

        B = np.concatenate((B_u, B_v, B_l))[np.newaxis].T

        # Initialize result array with zeros and mask
        X_full = np.ma.masked_array(np.zeros(B.shape), np.ones(B.shape))
        X_full.mask[self._where_not_zero] = True

        B = B[self._where_not_zero]

        X = - self._Ainv.dot(B)

        # Apply the result where relevant in X_full
        X_full[self._where_not_zero] = X

        U = X_full[0:(m*(n-1))].reshape((m, n-1))
        V = X_full[(m*(n-1)):(m*(n-1) + (m-1)*n)].reshape((m-1, n))

        return U, V


if __name__=="__main__":

    #Uc = Uc[:3, :4]
    #Vc = Vc[:3, :4]

    # custom mask for tests
    mask = (np.abs(Uc) < 1500)
    mask[:8, :] = True
    mask[:13, -2:] = True #comment for hole

    Uc = np.ma.masked_array(Uc, mask)
    Vc = np.ma.masked_array(Vc, mask)

    decenterer = Decenterer(Uc.mask)

    U, V = decenterer.apply(Uc, Vc)



    m, n = Uc.shape



    cmap = colors.ListedColormap(['white', 'gray'])
    bounds = [0, 0.5, 1]
    norm = colors.BoundaryNorm(bounds, cmap.N)

    y_axis = np.array([a for a in range(m)])
    x_axis = np.array([a for a in range(n)])
    x_axis_U = x_axis[:-1] + 0.5
    y_axis_V = y_axis[:-1] + 0.5


    fig, ax = plt.subplots()

    ax.imshow(mask, cmap=cmap)

    ax.quiver(x_axis, y_axis, Uc, Vc)
    ax.quiver(x_axis_U, y_axis, U, U*0, color="red")
    ax.quiver(x_axis, y_axis_V, V*0, V, color="red")

    ax.set_xticks(x_axis_U.tolist(), minor=False)
    ax.set_yticks(y_axis_V.tolist(), minor=False)
    ax.xaxis.grid(True, which='major')
    ax.yaxis.grid(True, which='major')

    ax.invert_yaxis()
    
    plt.show()
